Ryan Browning, Blake McLaughlin
Group 34
Report/Design

1)	Data structures:
a.	Linked lists â€“ To hold all the token values until the end, also to hold the current token
b.	Multi-Child tree - For the tokenizer tree
c.  Array - To store the contents of the text file

2)	Functions
Tokenizer(int state, char character, char token[])
Function_A. Main_Function - 
Data: int argc(Numbers of arguments given), char *argv[](The argument array, this will be the input text file) //Enter the variables and parameters once decided on.
Purpose - The main function will be used to take the file that includes the token tree and send it to the reading file function to take the token tree, read it and interpret the tree.
          It will also initialize the token tree
Expected Output: Implicitly: The tokenizer tree
                 Explicitly: The file argv[argc - 1]
				 
Function_B. File_Reading_Function - 
Data: char line[](The current line the scanner is on), char character(The current character the scanner is at, used to pass to interpreter tree)
Purpose: The purpose of the file reading function would be able to read the original text file and get every character to send to the interpreter tree function
Expected Output: char Character

Function_C. Interpreter_Function - 
Data: char Character(taken in from File_Reading_Function)
Purpose: The purpose of the Interpreter function will be to interpret the signs that tokens encounter throughout the token tree, signs include characters such as -, +, (, ), [, ], *, /.
Expected Output: The expected outcome of the interpreter function is for it to be used to interpret which of the nodes equal the characters mentioned above. 

*Pseudocode*

Start of .cpp file{
Create a struct_tree 
	character value
	token value
	terminator bool/int 
	pointer to child and sibling
Create a struct_tokens
	string token_value
	pointer to token linked list(optional) and next token 
Create a struct_current_token
	character value
	pointer to next character of token
	
struct_tree *start, *current_state;
struct_tokens *beginning;
struct current_token *token_beginning, *current_token_end;
}
	
main_function{
Initialize Token_tree
	make nodes for every state and it's children and their siblings
Try to open .txt file
	#Checks to make sure the correct text file is given
Send file to File_Reading_Function
Output the list of tokens to console 
}

File_Reading_Function{
Open the file given
Move all lines of the file into a single array
struct_tree *current_state = struct_tree *start
for(int i = 0; i < array.length(); i++)
	Interpreter(array[i])
}

Interpreter_Function{
Check with current state's child and its siblings 
if(state.character_value == array[i])
	Peek at next character value
	Check this state's child and its siblings character_value and compare to next character's value
	if(next character_value is the child of this state or a sibling of the child)
		Save character into linked list for current_token
	else
		if(terminator int == 1)
			Save character into linked list for current_token
			Add this linked list to struct_tokens
			Check if it's a 'read' or 'write' token
				(if not)Store the tree.token value in struct_token string token_value
			Create new Linked list struct_current_token
			Move pointers to correct places fo all structs
		else
			Parse error
else
	Parse error

3) Test Cases (The data inside of the text files [enclosed by ```])

```
	This := 4 * five
x := /* this is a comment */ y
``` This just tests out that it will read tokens correctly on a normal text

```
x = 5
```This checks for the parse error when the assign isn't called correctly

```
 // This is a comment
	/* This is also
a comment*/
/***/ /* <- that was a comment*/
w := ( 5 + 2 )
```This makes sure the comment section of the tree is made correctly

```
3+4.2
// This should still give number,plus,number
```This will test to see that it still gets the tokens no matter the spacing 

```
read

x := 5

write
```This makes sure it can recoginize the 'read' and 'write' tokens

```
	/* This will test the single line code*/ (x := 5) y := 45 - x * (1234567890 / 0987654321)
```This tests that a long single line code will work

4) N/A

